name: Stage 4 - System Stability and Deployment Optimization

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/**'
      - 'docker/**'
      - 'docker-compose.yml'
      - 'tests/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/**'
      - 'docker/**'
      - 'docker-compose.yml'
      - 'tests/**'

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg libgl1-mesa-glx libglib2.0-0
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov pytest-html pytest-xdist
    
    - name: Run unit tests with parallel execution
      run: |
        pytest tests/unit/ -v --cov=src --cov-report=xml --cov-report=html -n auto
    
    - name: Run integration tests
      run: |
        pytest tests/integration/ -v --cov=src --cov-report=xml --cov-report=html --cov-append
    
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: stability-deployment
        name: codecov-stability
        fail_ci_if_error: true
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      with:
        name: test-results-${{ matrix.python-version }}
        path: htmlcov/

  stability-test:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.10
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg libgl1-mesa-glx libglib2.0-0
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-xdist psutil memory_profiler
    
    - name: Run stability tests
      run: |
        pytest tests/stability/ -v --tb=short
    
    - name: Run memory leak tests
      run: |
        pytest tests/memory_leak/ -v --tb=short
    
    - name: Upload stability test results
      uses: actions/upload-artifact@v3
      with:
        name: stability-test-results
        path: test_reports/

  error-handling-test:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.10
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest
    
    - name: Run error handling tests
      run: |
        pytest tests/error_handling/ -v
    
    - name: Upload error handling test results
      uses: actions/upload-artifact@v3
      with:
        name: error-handling-test-results
        path: test_reports/

  monitoring-test:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.10
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-mock
    
    - name: Run monitoring tests
      run: |
        pytest tests/monitoring/ -v
    
    - name: Upload monitoring test results
      uses: actions/upload-artifact@v3
      with:
        name: monitoring-test-results
        path: test_reports/

  security-test:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.10
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest bandit safety
    
    - name: Run security tests with bandit
      run: |
        bandit -r src/ -f json -o bandit-report.json
    
    - name: Run safety check
      run: |
        safety check --json --output safety-report.json
    
    - name: Run security tests
      run: |
        pytest tests/security/ -v
    
    - name: Upload security test results
      uses: actions/upload-artifact@v3
      with:
        name: security-test-results
        path: test_reports/

  docker-build-test:
    needs: [stability-test, error-handling-test, monitoring-test, security-test]
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      run: |
        docker build -t msearch:latest .
    
    - name: Run container tests
      run: |
        docker run --rm msearch:latest python -m pytest tests/unit/ -v
    
    - name: Upload Docker test results
      uses: actions/upload-artifact@v3
      with:
        name: docker-test-results
        path: test_reports/

  deployment-test:
    needs: docker-build-test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Compose
      run: |
        sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.3/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
        sudo chmod +x /usr/local/bin/docker-compose
    
    - name: Start services with Docker Compose
      run: |
        docker-compose up -d
    
    - name: Wait for services to be ready
      run: |
        sleep 30
        curl -f http://localhost:8000/health || exit 1
    
    - name: Run deployment tests
      run: |
        docker-compose exec -T api python -m pytest tests/deployment/ -v
    
    - name: Stop services
      run: |
        docker-compose down
    
    - name: Upload deployment test results
      uses: actions/upload-artifact@v3
      with:
        name: deployment-test-results
        path: test_reports/

  performance-test:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.10
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-benchmark locust
    
    - name: Run performance tests
      run: |
        pytest tests/performance/ -v --benchmark-only
    
    - name: Run load tests
      run: |
        locust -f tests/load_testing/locustfile.py --headless -u 100 -r 10 --run-time 60s --html load_test_report.html
    
    - name: Upload performance test results
      uses: actions/upload-artifact@v3
      with:
        name: performance-test-results
        path: benchmark_results/