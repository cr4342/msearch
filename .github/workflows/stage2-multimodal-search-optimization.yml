name: Stage 2 - Multimodal Search Optimization

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/services/media_processor.py'
      - 'src/models/**'
      - 'src/core/**'
      - 'tests/unit/**'
      - 'tests/integration/**'
      - 'tests/performance/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'src/services/media_processor.py'
      - 'src/models/**'
      - 'src/core/**'
      - 'tests/unit/**'
      - 'tests/integration/**'
      - 'tests/performance/**'

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, 3.10, 3.11]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg
    
    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov pytest-html
    
    - name: Run unit tests
      run: |
        pytest tests/unit/ -v --cov=src --cov-report=xml --cov-report=html
    
    - name: Run integration tests
      run: |
        pytest tests/integration/ -v --cov=src --cov-report=xml --cov-report=html --cov-append
    
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: multimodal
        name: codecov-multimodal
        fail_ci_if_error: true
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      with:
        name: test-results-${{ matrix.python-version }}
        path: htmlcov/

  media-processing-test:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.10
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest
    
    - name: Download test media files
      run: |
        mkdir -p test_data/media
        curl -L -o test_data/media/test_video.mp4 https://sample-videos.com/video123/mp4/720/big_buck_bunny_720p_1mb.mp4
        curl -L -o test_data/media/test_audio.mp3 https://sample-videos.com/audio/mp3/crowd-cheering.mp3
        curl -L -o test_data/media/test_image.jpg https://sample-videos.com/img/SampleJPGImage_50kbmb.jpg
    
    - name: Run media processing tests
      run: |
        pytest tests/media_processing/ -v
    
    - name: Upload media processing test results
      uses: actions/upload-artifact@v3
      with:
        name: media-processing-test-results
        path: test_reports/

  scene-detection-test:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.10
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest
    
    - name: Download test video files
      run: |
        mkdir -p test_data/videos
        curl -L -o test_data/videos/test_scene_video.mp4 https://sample-videos.com/video123/mp4/720/big_buck_bunny_720p_2mb.mp4
    
    - name: Run scene detection tests
      run: |
        pytest tests/scene_detection/ -v
    
    - name: Upload scene detection test results
      uses: actions/upload-artifact@v3
      with:
        name: scene-detection-test-results
        path: test_reports/

  audio-processing-test:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.10
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest
    
    - name: Download test audio files
      run: |
        mkdir -p test_data/audio
        curl -L -o test_data/audio/test_speech.wav https://sample-videos.com/audio/mp3/wave.mp3
    
    - name: Run audio processing tests
      run: |
        pytest tests/audio_processing/ -v
    
    - name: Upload audio processing test results
      uses: actions/upload-artifact@v3
      with:
        name: audio-processing-test-results
        path: test_reports/

  performance-test:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: 3.10
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest-benchmark
    
    - name: Run performance tests
      run: |
        pytest tests/performance/ -v --benchmark-only
    
    - name: Upload performance test results
      uses: actions/upload-artifact@v3
      with:
        name: performance-test-results
        path: benchmark_results/