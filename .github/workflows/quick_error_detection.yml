name: 快速错误检测工作流

# 触发条件: 推送到任何分支、创建PR、手动触发
on:
  push:
    branches: [ main, develop, feature/* ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

# 设置环境变量
env:
  PYTHONPATH: ${{ github.workspace }}/src
  QT_QPA_PLATFORM: offscreen  # 避免GUI相关错误

jobs:
  # 第一阶段: 快速语法检查和基础测试 (5分钟内完成)
  quick-checks:
    name: 快速检查
    runs-on: ubuntu-latest
    outputs:
      should_run_full: ${{ steps.changes.outputs.should_run_full }}
      changed_components: ${{ steps.changes.outputs.changed_components }}
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # 获取完整历史以便比较变更
    
    - name: 设置Python环境
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: 缓存Python依赖
      uses: actions/cache@v3
      id: cache
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-quick-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-quick-
          ${{ runner.os }}-pip-
    
    - name: 安装基础依赖
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pylint mypy bandit safety pytest pytest-xvfb
        pip install -r requirements.txt --no-deps  # 只安装项目依赖，不安装子依赖
    
    - name: 检测文件变更
      id: changes
      run: |
        # 检测变更的组件
        if [ ${{ github.event_name }} == 'push' ]; then
          BASE=${{ github.event.before }}
        elif [ ${{ github.event_name }} == 'pull_request' ]; then
          BASE=${{ github.event.pull_request.base.sha }}
        else
          BASE="HEAD~1"
        fi
        
        # 检测变更的文件
        CHANGED_FILES=$(git diff --name-only $BASE..${{ github.sha }})
        echo "Changed files: $CHANGED_FILES"
        
        # 确定变更的组件
        COMPONENTS=""
        if echo "$CHANGED_FILES" | grep -E "^src/(api|core)/"; then
          COMPONENTS="$COMPONENTS,api_core"
        fi
        if echo "$CHANGED_FILES" | grep -E "^src/(processors|business)/"; then
          COMPONENTS="$COMPONENTS,processors"
        fi
        if echo "$CHANGED_FILES" | grep -E "^src/(storage|gui)/"; then
          COMPONENTS="$COMPONENTS,storage_gui"
        fi
        if echo "$CHANGED_FILES" | grep -E "^tests/"; then
          COMPONENTS="$COMPONENTS,tests"
        fi
        if echo "$CHANGED_FILES" | grep -E "^requirements\.txt$|setup\.py$|pyproject\.toml$"; then
          COMPONENTS="$COMPONENTS,dependencies"
        fi
        
        # 去掉开头的逗号
        COMPONENTS=${COMPONENTS#,}
        echo "changed_components=$COMPONENTS" >> $GITHUB_OUTPUT
        
        # 如果有重要变更，需要运行完整检查
        if echo "$COMPONENTS" | grep -E "(api_core|processors|dependencies)"; then
          echo "should_run_full=true" >> $GITHUB_OUTPUT
        else
          echo "should_run_full=false" >> $GITHUB_OUTPUT
        fi
    
    - name: 快速语法检查
      run: |
        # 只检查变更的文件
        if [ ${{ github.event_name }} == 'push' ]; then
          BASE=${{ github.event.before }}
        elif [ ${{ github.event_name }} == 'pull_request' ]; then
          BASE=${{ github.event.pull_request.base.sha }}
        else
          BASE="HEAD~1"
        fi
        
        CHANGED_PY_FILES=$(git diff --name-only $BASE..${{ github.sha }} | grep -E "\.py$" || true)
        if [ -n "$CHANGED_PY_FILES" ]; then
          echo "检查变更的Python文件语法:"
          for file in $CHANGED_PY_FILES; do
            if [ -f "$file" ]; then
              python -m py_compile "$file" && echo "✓ $file 语法正确" || echo "✗ $file 语法错误"
            fi
          done
        else
          echo "没有Python文件变更，跳过语法检查"
        fi
    
    - name: 快速导入检查
      run: |
        # 检查关键模块是否可以正常导入
        python -c "
        import sys
        modules_to_check = [
          'src.core.config',
          'src.core.config_manager',
          'src.business.media_processor',
          'src.business.embedding_engine',
          'src.processors.audio_processor',
          'src.processors.image_processor',
          'src.processors.video_processor',
          'src.processors.text_processor',
          'src.api.main'
        ]
        
        failed_imports = []
        for module in modules_to_check:
          try:
            __import__(module)
            print(f'✓ {module} 导入成功')
          except Exception as e:
            print(f'✗ {module} 导入失败: {e}')
            failed_imports.append(module)
        
        if failed_imports:
          print(f'\\n以下模块导入失败: {failed_imports}')
          sys.exit(1)
        else:
          print('\\n所有关键模块导入成功')
        "
    
    - name: 快速代码风格检查
      run: |
        # 只对变更的文件进行flake8检查
        if [ ${{ github.event_name }} == 'push' ]; then
          BASE=${{ github.event.before }}
        elif [ ${{ github.event_name }} == 'pull_request' ]; then
          BASE=${{ github.event.pull_request.base.sha }}
        else
          BASE="HEAD~1"
        fi
        
        CHANGED_PY_FILES=$(git diff --name-only $BASE..${{ github.sha }} | grep -E "\.py$" || true)
        if [ -n "$CHANGED_PY_FILES" ]; then
          echo "检查变更文件的代码风格:"
          # 设置flake8配置，只检查严重错误
          flake8 --select=E9,F63,F7,F82 --show-source --statistics $CHANGED_PY_FILES || true
        else
          echo "没有Python文件变更，跳过代码风格检查"
        fi

  # 第二阶段: 针对关键组件的深度检查
  component-checks:
    name: 组件检查
    needs: quick-checks
    if: needs.quick-checks.outputs.should_run_full == 'true'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: [api_core, processors, storage_gui]
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
    
    - name: 设置Python环境
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: 缓存Python依赖
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-component-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-component-
          ${{ runner.os }}-pip-
    
    - name: 安装依赖
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-xvfb
    
    - name: 安装系统依赖
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg libmagic1 xvfb
    
    # API和核心组件检查
    - name: API和核心组件检查
      if: matrix.component == 'api_core'
      run: |
        echo "检查API和核心组件..."
        # 运行API相关的单元测试
        python -m pytest tests/unit/test_api_modules.py -v --tb=short --maxfail=3
        # 运行核心组件测试
        python -m pytest tests/unit/test_core_components.py -v --tb=short --maxfail=3
    
    # 处理器组件检查
    - name: 多模态处理器检查
      if: matrix.component == 'processors'
      run: |
        echo "检查多模态处理器组件..."
        # 运行处理器相关测试
        python -m pytest tests/unit/test_media_processors.py -v --tb=short --maxfail=3
        # 检查嵌入引擎
        python -m pytest tests/unit/test_embedding_engine.py -v --tb=short --maxfail=3
        # 检查时间定位引擎
        python -m pytest tests/unit/test_temporal_localization_engine.py -v --tb=short --maxfail=3
    
    # 存储和GUI组件检查
    - name: 存储和GUI组件检查
      if: matrix.component == 'storage_gui'
      run: |
        echo "检查存储和GUI组件..."
        # 运行存储相关测试
        python -m pytest tests/unit/test_vector_store.py -v --tb=short --maxfail=3
        # 检查文件类型检测器
        python -m pytest tests/unit/test_file_type_detector.py -v --tb=short --maxfail=3

  # 第三阶段: 安全和质量检查
  security-quality-checks:
    name: 安全和质量检查
    needs: quick-checks
    if: needs.quick-checks.outputs.should_run_full == 'true'
    runs-on: ubuntu-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
    
    - name: 设置Python环境
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: 安装依赖
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety pylint mypy
        pip install -r requirements.txt --no-deps
    
    - name: 安全漏洞扫描
      run: |
        echo "运行安全漏洞扫描..."
        # 检查已知安全漏洞
        safety check --json || true
        # 运行bandit安全检查
        bandit -r src/ -f json || true
    
    - name: 代码质量检查
      run: |
        echo "运行代码质量检查..."
        # 运行pylint检查
        pylint src/ --disable=C0114,C0115,C0116 --output-format=json || true
        # 运行mypy类型检查
        mypy src/ --ignore-missing-imports --no-error-summary || true

  # 第四阶段: 集成测试 (仅当关键组件变更时)
  integration-tests:
    name: 集成测试
    needs: [quick-checks, component-checks]
    if: needs.quick-checks.outputs.should_run_full == 'true'
    runs-on: ubuntu-latest
    
    services:
      qdrant:
        image: qdrant/qdrant:latest
        ports:
          - 6333:6333
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
    
    - name: 设置Python环境
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: 缓存Python依赖
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-integration-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-integration-
          ${{ runner.os }}-pip-
    
    - name: 安装依赖
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-xvfb
    
    - name: 安装系统依赖
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg libmagic1 xvfb
    
    - name: 运行集成测试
      run: |
        echo "运行集成测试..."
        # 设置环境变量
        export QDRANT_HOST=localhost
        export QDRANT_PORT=6333
        
        # 运行基础集成测试
        python -m pytest tests/integration/test_basic_integration.py -v --tb=short --maxfail=3
        # 运行API集成测试
        python -m pytest tests/integration/test_api_basic.py -v --tb=short --maxfail=3

  # 第五阶段: 错误汇总和通知
  error-summary:
    name: 错误汇总
    needs: [quick-checks, component-checks, security-quality-checks, integration-tests]
    if: always()
    runs-on: ubuntu-latest
    
    steps:
    - name: 检查结果汇总
      run: |
        # 创建错误汇总报告
        cat << EOF > error_summary.md
        
        # 代码检查结果汇总
        
        ## 快速检查结果
        - 状态: ${{ needs.quick-checks.result }}
        
        ## 组件检查结果
        - 状态: ${{ needs.component-checks.result }}
        
        ## 安全和质量检查结果
        - 状态: ${{ needs.security-quality-checks.result }}
        
        ## 集成测试结果
        - 状态: ${{ needs.integration-tests.result }}
        
        ## 变更组件
        - 组件: ${{ needs.quick-checks.outputs.changed_components }}
        
        ## 建议
        EOF
        
        if [[ "${{ needs.quick-checks.result }}" == "failure" || "${{ needs.component-checks.result }}" == "failure" || "${{ needs.security-quality-checks.result }}" == "failure" || "${{ needs.integration-tests.result }}" == "failure" ]]; then
          echo "- ❌ 检测到错误，请查看详细日志" >> error_summary.md
          echo "- 🔍 建议优先修复语法错误和导入错误" >> error_summary.md
          echo "- 📋 查看具体失败步骤的日志获取更多信息" >> error_summary.md
        else
          echo "- ✅ 所有检查通过" >> error_summary.md
          echo "- 🚀 代码质量良好，可以继续开发" >> error_summary.md
        fi
        
        # 输出汇总报告
        cat error_summary.md
    
    - name: 上传错误汇总
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: error-summary
        path: error_summary.md
    
    - name: 通知失败
      if: failure()
      run: |
        echo "::error::代码检查失败，请查看详细日志修复问题"
        echo "::error::快速检查: ${{ needs.quick-checks.result }}"
        echo "::error::组件检查: ${{ needs.component-checks.result }}"
        echo "::error::安全检查: ${{ needs.security-quality-checks.result }}"
        echo "::error::集成测试: ${{ needs.integration-tests.result }}"