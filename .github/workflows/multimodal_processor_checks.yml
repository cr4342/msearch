name: 多模态处理器专项检查

# 触发条件: 处理器相关文件变更时触发
on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/processors/**'
      - 'src/business/media_processor.py'
      - 'src/business/embedding_engine.py'
      - 'src/business/multimodal_fusion_engine.py'
      - 'src/business/temporal_localization_engine.py'
      - 'tests/unit/test_media_processors.py'
      - 'tests/unit/test_embedding_engine.py'
      - 'tests/unit/test_temporal_localization_engine.py'
      - 'requirements.txt'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'src/processors/**'
      - 'src/business/media_processor.py'
      - 'src/business/embedding_engine.py'
      - 'src/business/multimodal_fusion_engine.py'
      - 'src/business/temporal_localization_engine.py'
      - 'tests/unit/test_media_processors.py'
      - 'tests/unit/test_embedding_engine.py'
      - 'tests/unit/test_temporal_localization_engine.py'
      - 'requirements.txt'
  workflow_dispatch:

# 设置环境变量
env:
  PYTHONPATH: ${{ github.workspace }}/src
  QT_QPA_PLATFORM: offscreen  # 避免GUI相关错误

jobs:
  # 音频处理器检查
  audio-processor-check:
    name: 音频处理器检查
    runs-on: ubuntu-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
    
    - name: 设置Python环境
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: 缓存Python依赖
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-audio-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-audio-
          ${{ runner.os }}-pip-
    
    - name: 安装依赖
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-xvfb
    
    - name: 安装系统依赖
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg libmagic1 xvfb
    
    - name: 音频处理器导入检查
      run: |
        python -c "
        import sys
        try:
          from src.processors.audio_processor import AudioProcessor
          from src.processors.audio_classifier import AudioClassifier
          print('✓ 音频处理器模块导入成功')
        except Exception as e:
          print(f'✗ 音频处理器模块导入失败: {e}')
          sys.exit(1)
        "
    
    - name: 音频处理器功能检查
      run: |
        python -c "
        import sys
        import os
        sys.path.insert(0, 'src')
        
        # 创建测试音频文件路径
        test_audio_path = 'tests/temp/test_audio.mp3'
        
        try:
          from processors.audio_processor import AudioProcessor
          processor = AudioProcessor()
          
          # 检查处理器是否初始化成功
          print('✓ 音频处理器初始化成功')
          
          # 检查基本方法是否存在
          methods = ['process_file', 'extract_features', 'extract_transcript']
          for method in methods:
            if hasattr(processor, method):
              print(f'✓ 方法 {method} 存在')
            else:
              print(f'✗ 方法 {method} 不存在')
              sys.exit(1)
              
          print('✓ 音频处理器功能检查通过')
        except Exception as e:
          print(f'✗ 音频处理器功能检查失败: {e}')
          sys.exit(1)
        "
    
    - name: 运行音频处理器测试
      run: |
        # 运行音频处理器相关的单元测试
        python -m pytest tests/unit/ -k "audio" -v --tb=short --maxfail=3 || true

  # 图像处理器检查
  image-processor-check:
    name: 图像处理器检查
    runs-on: ubuntu-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
    
    - name: 设置Python环境
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: 缓存Python依赖
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-image-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-image-
          ${{ runner.os }}-pip-
    
    - name: 安装依赖
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-xvfb
    
    - name: 安装系统依赖
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg libmagic1 xvfb
    
    - name: 图像处理器导入检查
      run: |
        python -c "
        import sys
        try:
          from src.processors.image_processor import ImageProcessor
          print('✓ 图像处理器模块导入成功')
        except Exception as e:
          print(f'✗ 图像处理器模块导入失败: {e}')
          sys.exit(1)
        "
    
    - name: 图像处理器功能检查
      run: |
        python -c "
        import sys
        import os
        sys.path.insert(0, 'src')
        
        try:
          from processors.image_processor import ImageProcessor
          processor = ImageProcessor()
          
          # 检查处理器是否初始化成功
          print('✓ 图像处理器初始化成功')
          
          # 检查基本方法是否存在
          methods = ['process_file', 'extract_features', 'detect_faces']
          for method in methods:
            if hasattr(processor, method):
              print(f'✓ 方法 {method} 存在')
            else:
              print(f'✗ 方法 {method} 不存在')
              sys.exit(1)
              
          print('✓ 图像处理器功能检查通过')
        except Exception as e:
          print(f'✗ 图像处理器功能检查失败: {e}')
          sys.exit(1)
        "
    
    - name: 运行图像处理器测试
      run: |
        # 运行图像处理器相关的单元测试
        python -m pytest tests/unit/ -k "image" -v --tb=short --maxfail=3 || true

  # 视频处理器检查
  video-processor-check:
    name: 视频处理器检查
    runs-on: ubuntu-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
    
    - name: 设置Python环境
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: 缓存Python依赖
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-video-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-video-
          ${{ runner.os }}-pip-
    
    - name: 安装依赖
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-xvfb
    
    - name: 安装系统依赖
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg libmagic1 xvfb
    
    - name: 视频处理器导入检查
      run: |
        python -c "
        import sys
        try:
          from src.processors.video_processor import VideoProcessor
          print('✓ 视频处理器模块导入成功')
        except Exception as e:
          print(f'✗ 视频处理器模块导入失败: {e}')
          sys.exit(1)
        "
    
    - name: 视频处理器功能检查
      run: |
        python -c "
        import sys
        import os
        sys.path.insert(0, 'src')
        
        try:
          from processors.video_processor import VideoProcessor
          processor = VideoProcessor()
          
          # 检查处理器是否初始化成功
          print('✓ 视频处理器初始化成功')
          
          # 检查基本方法是否存在
          methods = ['process_file', 'extract_frames', 'extract_audio']
          for method in methods:
            if hasattr(processor, method):
              print(f'✓ 方法 {method} 存在')
            else:
              print(f'✗ 方法 {method} 不存在')
              sys.exit(1)
              
          print('✓ 视频处理器功能检查通过')
        except Exception as e:
          print(f'✗ 视频处理器功能检查失败: {e}')
          sys.exit(1)
        "
    
    - name: 运行视频处理器测试
      run: |
        # 运行视频处理器相关的单元测试
        python -m pytest tests/unit/ -k "video" -v --tb=short --maxfail=3 || true

  # 文本处理器检查
  text-processor-check:
    name: 文本处理器检查
    runs-on: ubuntu-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
    
    - name: 设置Python环境
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: 缓存Python依赖
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-text-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-text-
          ${{ runner.os }}-pip-
    
    - name: 安装依赖
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-xvfb
    
    - name: 文本处理器导入检查
      run: |
        python -c "
        import sys
        try:
          from src.processors.text_processor import TextProcessor
          print('✓ 文本处理器模块导入成功')
        except Exception as e:
          print(f'✗ 文本处理器模块导入失败: {e}')
          sys.exit(1)
        "
    
    - name: 文本处理器功能检查
      run: |
        python -c "
        import sys
        import os
        sys.path.insert(0, 'src')
        
        try:
          from processors.text_processor import TextProcessor
          processor = TextProcessor()
          
          # 检查处理器是否初始化成功
          print('✓ 文本处理器初始化成功')
          
          # 检查基本方法是否存在
          methods = ['process_file', 'extract_text', 'extract_embeddings']
          for method in methods:
            if hasattr(processor, method):
              print(f'✓ 方法 {method} 存在')
            else:
              print(f'✗ 方法 {method} 不存在')
              sys.exit(1)
              
          print('✓ 文本处理器功能检查通过')
        except Exception as e:
          print(f'✗ 文本处理器功能检查失败: {e}')
          sys.exit(1)
        "
    
    - name: 运行文本处理器测试
      run: |
        # 运行文本处理器相关的单元测试
        python -m pytest tests/unit/ -k "text" -v --tb=short --maxfail=3 || true

  # 嵌入引擎检查
  embedding-engine-check:
    name: 嵌入引擎检查
    runs-on: ubuntu-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
    
    - name: 设置Python环境
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: 缓存Python依赖
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-embedding-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-embedding-
          ${{ runner.os }}-pip-
    
    - name: 安装依赖
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-xvfb
    
    - name: 嵌入引擎导入检查
      run: |
        python -c "
        import sys
        try:
          from src.business.embedding_engine import EmbeddingEngine, get_embedding_engine
          print('✓ 嵌入引擎模块导入成功')
        except Exception as e:
          print(f'✗ 嵌入引擎模块导入失败: {e}')
          sys.exit(1)
        "
    
    - name: 嵌入引擎功能检查
      run: |
        python -c "
        import sys
        import os
        sys.path.insert(0, 'src')
        
        try:
          from business.embedding_engine import EmbeddingEngine, get_embedding_engine
          
          # 检查嵌入引擎是否可以获取
          engine = get_embedding_engine()
          print('✓ 嵌入引擎获取成功')
          
          # 检查基本方法是否存在
          methods = ['get_text_embedding', 'get_image_embedding', 'get_audio_embedding']
          for method in methods:
            if hasattr(engine, method):
              print(f'✓ 方法 {method} 存在')
            else:
              print(f'✗ 方法 {method} 不存在')
              sys.exit(1)
              
          print('✓ 嵌入引擎功能检查通过')
        except Exception as e:
          print(f'✗ 嵌入引擎功能检查失败: {e}')
          sys.exit(1)
        "
    
    - name: 运行嵌入引擎测试
      run: |
        # 运行嵌入引擎相关的单元测试
        python -m pytest tests/unit/test_embedding_engine.py -v --tb=short --maxfail=3 || true

  # 时间定位引擎检查
  temporal-engine-check:
    name: 时间定位引擎检查
    runs-on: ubuntu-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
    
    - name: 设置Python环境
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: 缓存Python依赖
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-temporal-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-temporal-
          ${{ runner.os }}-pip-
    
    - name: 安装依赖
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-xvfb
    
    - name: 时间定位引擎导入检查
      run: |
        python -c "
        import sys
        try:
          from src.business.temporal_localization_engine import TemporalLocalizationEngine
          print('✓ 时间定位引擎模块导入成功')
        except Exception as e:
          print(f'✗ 时间定位引擎模块导入失败: {e}')
          sys.exit(1)
        "
    
    - name: 时间定位引擎功能检查
      run: |
        python -c "
        import sys
        import os
        sys.path.insert(0, 'src')
        
        try:
          from business.temporal_localization_engine import TemporalLocalizationEngine
          engine = TemporalLocalizationEngine()
          
          # 检查引擎是否初始化成功
          print('✓ 时间定位引擎初始化成功')
          
          # 检查基本方法是否存在
          methods = ['localize_in_media', 'extract_timestamps', 'search_by_time']
          for method in methods:
            if hasattr(engine, method):
              print(f'✓ 方法 {method} 存在')
            else:
              print(f'✗ 方法 {method} 不存在')
              sys.exit(1)
              
          print('✓ 时间定位引擎功能检查通过')
        except Exception as e:
          print(f'✗ 时间定位引擎功能检查失败: {e}')
          sys.exit(1)
        "
    
    - name: 运行时间定位引擎测试
      run: |
        # 运行时间定位引擎相关的单元测试
        python -m pytest tests/unit/test_temporal_localization_engine.py -v --tb=short --maxfail=3 || true

  # 多模态处理器集成检查
  multimodal-integration-check:
    name: 多模态处理器集成检查
    needs: [audio-processor-check, image-processor-check, video-processor-check, text-processor-check, embedding-engine-check, temporal-engine-check]
    runs-on: ubuntu-latest
    
    steps:
    - name: 检出代码
      uses: actions/checkout@v4
    
    - name: 设置Python环境
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: 缓存Python依赖
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-multimodal-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-multimodal-
          ${{ runner.os }}-pip-
    
    - name: 安装依赖
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-xvfb
    
    - name: 安装系统依赖
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg libmagic1 xvfb
    
    - name: 多模态融合引擎检查
      run: |
        python -c "
        import sys
        try:
          from src.business.multimodal_fusion_engine import MultimodalFusionEngine
          engine = MultimodalFusionEngine()
          print('✓ 多模态融合引擎初始化成功')
          
          # 检查基本方法是否存在
          methods = ['fuse_modalities', 'search_across_modalities']
          for method in methods:
            if hasattr(engine, method):
              print(f'✓ 方法 {method} 存在')
            else:
              print(f'✗ 方法 {method} 不存在')
              sys.exit(1)
              
          print('✓ 多模态融合引擎功能检查通过')
        except Exception as e:
          print(f'✗ 多模态融合引擎功能检查失败: {e}')
          sys.exit(1)
        "
    
    - name: 媒体处理器检查
      run: |
        python -c "
        import sys
        try:
          from src.business.media_processor import MediaProcessor
          processor = MediaProcessor()
          print('✓ 媒体处理器初始化成功')
          
          # 检查基本方法是否存在
          methods = ['process_file', 'get_supported_formats']
          for method in methods:
            if hasattr(processor, method):
              print(f'✓ 方法 {method} 存在')
            else:
              print(f'✗ 方法 {method} 不存在')
              sys.exit(1)
              
          print('✓ 媒体处理器功能检查通过')
        except Exception as e:
          print(f'✗ 媒体处理器功能检查失败: {e}')
          sys.exit(1)
        "
    
    - name: 运行多模态集成测试
      run: |
        # 运行多模态相关的集成测试
        python -m pytest tests/integration/test_multimodal_processing_pipeline.py -v --tb=short --maxfail=3 || true
    
    - name: 生成检查报告
      run: |
        cat << EOF > multimodal_check_report.md
        
        # 多模态处理器检查报告
        
        ## 检查结果
        
        ### 音频处理器
        - 状态: ${{ needs.audio-processor-check.result }}
        
        ### 图像处理器
        - 状态: ${{ needs.image-processor-check.result }}
        
        ### 视频处理器
        - 状态: ${{ needs.video-processor-check.result }}
        
        ### 文本处理器
        - 状态: ${{ needs.text-processor-check.result }}
        
        ### 嵌入引擎
        - 状态: ${{ needs.embedding-engine-check.result }}
        
        ### 时间定位引擎
        - 状态: ${{ needs.temporal-engine-check.result }}
        
        ### 多模态集成检查
        - 状态: ${{ job.status }}
        
        ## 建议
        
        EOF
        
        if [[ "${{ needs.audio-processor-check.result }}" == "failure" || "${{ needs.image-processor-check.result }}" == "failure" || "${{ needs.video-processor-check.result }}" == "failure" || "${{ needs.text-processor-check.result }}" == "failure" || "${{ needs.embedding-engine-check.result }}" == "failure" || "${{ needs.temporal-engine-check.result }}" == "failure" || "${{ job.status }}" == "failure" ]]; then
          echo "- ❌ 检测到多模态处理器错误" >> multimodal_check_report.md
          echo "- 🔍 请查看具体失败步骤的日志" >> multimodal_check_report.md
          echo "- 📋 优先修复导入错误和基本功能错误" >> multimodal_check_report.md
        else
          echo "- ✅ 所有多模态处理器检查通过" >> multimodal_check_report.md
          echo "- 🚀 多模态处理功能正常" >> multimodal_check_report.md
        fi
        
        # 输出报告
        cat multimodal_check_report.md
    
    - name: 上传检查报告
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: multimodal-check-report
        path: multimodal_check_report.md