name: Multimodal Search Integration Tests

on:
  push:
    branches: [ main, master ]
    paths:
      - 'src/core/**'
      - 'src/business/media_processing/**'
      - 'src/api/**'
      - 'tests/integration/**'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'src/core/**'
      - 'src/business/media_processing/**'
      - 'src/api/**'
      - 'tests/integration/**'
  workflow_dispatch:
    inputs:
      test_type:
        description: 'Test Type'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - image
          - video
          - audio
          - face

jobs:
  multimodal-tests:
    name: Multimodal Tests
    runs-on: ubuntu-latest
    
    env:
      # 设置CI环境变量，优化资源使用
      PYTHONUNBUFFERED: '1'
      PYTORCH_CUDA_ALLOC_CONF: max_split_size_mb:128
      OMP_NUM_THREADS: 2
      MKL_NUM_THREADS: 2
      # 禁用GUI相关功能
      DISPLAY: ''
      QT_QPA_PLATFORM: 'offscreen'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y ffmpeg libmagic1
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install setuptools wheel
        # 优先安装opencv-python-headless避免GUI依赖问题
        pip install opencv-python-headless>=4.8.0
        # 安装测试框架
        pip install pytest pytest-cov pytest-mock
        # 使用CI专用依赖文件
        if [ -f requirements-ci.txt ]; then 
          pip install -r requirements-ci.txt; 
        elif [ -f requirements.txt ]; then 
          # 如果没有CI专用文件，则安装基础依赖但跳过可能有问题的包
          pip install torch==2.0.1+cpu torchvision==0.15.2+cpu --index-url https://download.pytorch.org/whl/cpu
          pip install numpy fastapi uvicorn pydantic httpx requests aiofiles python-multipart
          pip install sqlalchemy qdrant-client pillow librosa soundfile pydub scikit-image
          pip install scipy scikit-learn infinity-emb sentence-transformers
          pip install watchdog psutil tqdm colorama pyyaml python-dotenv chardet python-magic
          pip install pytest pytest-cov pytest-mock
        fi
    
    - name: Run image processing tests
      if: github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'image' || github.event_name != 'workflow_dispatch'
      run: |
        pytest -xvs tests/integration/test_image_processing.py
    
    - name: Run video processing tests
      if: github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'video' || github.event_name != 'workflow_dispatch'
      run: |
        pytest -xvs tests/integration/test_video_processing.py
    
    - name: Run audio processing tests
      if: github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'audio' || github.event_name != 'workflow_dispatch'
      run: |
        pytest -xvs tests/integration/test_audio_processing.py
    
    - name: Run face recognition tests
      if: github.event.inputs.test_type == 'all' || github.event.inputs.test_type == 'face' || github.event_name != 'workflow_dispatch'
      run: |
        pytest -xvs tests/integration/test_face_recognition.py

  smart-retrieval-tests:
    name: Smart Retrieval Tests
    runs-on: ubuntu-latest
    
    env:
      # 设置CI环境变量，优化资源使用
      PYTHONUNBUFFERED: '1'
      PYTORCH_CUDA_ALLOC_CONF: max_split_size_mb:128
      OMP_NUM_THREADS: 2
      MKL_NUM_THREADS: 2
      # 禁用GUI相关功能
      DISPLAY: ''
      QT_QPA_PLATFORM: 'offscreen'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install setuptools wheel
        # 优先安装opencv-python-headless避免GUI依赖问题
        pip install opencv-python-headless>=4.8.0
        # 安装测试框架
        pip install pytest pytest-cov pytest-mock
        # 使用CI专用依赖文件
        if [ -f requirements-ci.txt ]; then 
          pip install -r requirements-ci.txt; 
        elif [ -f requirements.txt ]; then 
          # 如果没有CI专用文件，则安装基础依赖但跳过可能有问题的包
          pip install torch==2.0.1+cpu torchvision==0.15.2+cpu --index-url https://download.pytorch.org/whl/cpu
          pip install numpy fastapi uvicorn pydantic httpx requests aiofiles python-multipart
          pip install sqlalchemy qdrant-client pillow librosa soundfile pydub scikit-image
          pip install scipy scikit-learn infinity-emb sentence-transformers
          pip install watchdog psutil tqdm colorama pyyaml python-dotenv chardet python-magic
          pip install pytest pytest-cov pytest-mock
        fi
    
    - name: Run smart retrieval tests
      run: |
        pytest -xvs tests/integration/test_smart_retrieval.py
        pytest -xvs tests/integration/test_multi_modal_fusion.py