name: Deploy and Release

on:
  push:
    tags: ['v*.*.*']
  workflow_dispatch:
    inputs:
      deploy_environment:
        description: 'Deploy Environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

jobs:
  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: msearch/msearch
        tags: |
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha,prefix=sha-
    
    - name: Build and push
      uses: docker/buildx-build-push@v4
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  create-release:
    name: Create GitHub Release
    needs: build-docker
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install setuptools wheel
    
    - name: Build package
      run: |
        python setup.py sdist bdist_wheel
    
    - name: Generate changelog
      id: changelog
      run: |
        git log --pretty=format:"%h %s" $(git describe --tags --abbrev=0 $(git describe --tags --abbrev=0^))..$(git describe --tags --abbrev=0) > changelog.txt
        echo "::set-output name=content::$(cat changelog.txt)"
    
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        body: ${{ steps.changelog.outputs.content }}
        draft: false
        prerelease: false
    
    - name: Upload Release Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/
        asset_name: msearch-package.zip
        asset_content_type: application/zip

  deploy-staging:
    name: Deploy to Staging
    needs: build-docker
    runs-on: ubuntu-latest
    if: github.event.inputs.deploy_environment == 'staging' || (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') && contains(github.ref, '-beta'))
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install deployment tools
      run: |
        pip install ansible
    
    - name: Deploy to staging
      run: |
        # Add deployment commands here
        echo "Deploying to staging environment"

  deploy-production:
    name: Deploy to Production
    needs: build-docker
    runs-on: ubuntu-latest
    if: github.event.inputs.deploy_environment == 'production' || (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') && !contains(github.ref, '-beta'))
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install deployment tools
      run: |
        pip install ansible
    
    - name: Deploy to production
      run: |
        # Add deployment commands here
        echo "Deploying to production environment"